注意：
	在android中每个窗口界面都是一个Activity类来表示的，而每个Activity都有自己的生命周期。一个应用程序就是一个或多个活动加上包含这些活动的Linux进程。
	Android 中，即使进程结束了，相应的应用程序还是“活着的”，即活动的生命周期与进程的生命周期没有关系。进程只是各种活动可以随意使用的一个容器。

应用程序的生命周期：
	改变状态时，系统会通过onXX()方法通知开发人员。
	onCreate(Bundle): 首次启动活动时会调用该方法。可使用该方法执行一次性的初始化工作。接受一个参数null或由onSaveInstanceState()方法以前保存的某个状态的信息
	onStart()		:该方法说明了将要显示给用户的活动。？
	onResume()	:用户可以开始与活动进行交互时调用该方法。*这个方法非常适合播放动画和音乐。
	onPause()		:活动将要进入后台时会运行该方法，*活动进入后台的原因通常是前台启动了另一个活动。应该在该方法中保存程序的持久性状态。
	onStop()		:用户不在看到某个活动，或者在一段内不需要某个活动时，可以调用该方法。*如果内存不足，可能永远都不会调用onStop()方法（系统可能会终止线程）
	onRestart()	:将已处于停止状态的活动重新显示给用户。
	onDestriy()	:销毁活动前会调用该方法。*如果内存不足，可能永远都不会调用onDestroy()（系统会终止线程）
	onSaveInstanceState(Bundle) :Android 调用该方法的作用是让活动可以保存每个实例的状态，如光标在文本字段中的位置。*通常无需覆写该方法，因为该方法的默认实现会保存所有用户界面的状态。
	onRestoreInstanceState(Bundle) :使用onSaveInstanceState()方法以前保存的状态重新初始化某个活动时会调用该方法。

																																					-------------------------------------------
																																					|						  onResume() 									|
																																					|																					|
																																					|																					|
																																					|																					|
																																					|																					|	
																																					|																					|	
				onCreate()、onStart()、onRestoreInstanceState()、onResume()				V		 onSaveInstanceState()、onPause()		  |		<process killed>
	启动-----------------------------------------------------------------> 运行 ----------------------------------> 暂停 ---------------------->销毁
																																					^																					|														^
																																					|																					|														|
																																					|																					|														|
																																					|																					|														|
																																					|																					|														|
																																					|																					|														|
																																					|																					|														|
																																					| onResume()、onStart()、onRestart()			V	onDestroy()/ProcessKilled>|							
																																					-----------------------------------------停止--------------------------
	
	没有在前台中运行的活动可能停止，或者容纳这些活动的Linux进程被“杀死”,从而为新的活动腾出空间。因此***onPause()方法可能是活动中调用的最后的一个方法，所以才应在该方法中保存下次要继续使用的数据。


AndroidSDK比较重要的对象：
	活动（Activity）：一个活动就是一个用户界面屏幕。一个应用程序可以定义一个或多个活动（Activity）,以处理程序不同阶段中的任务。
	意图（Intent）	: 描述动作的机制。在Android 中几乎所有事情都要经历意图这个阶段。
	服务（Service） ：服务是后台运行的任务，无需用户直接与其交互，它与unix的守护进程类似。后台运行程序。
	内容提供者（）	：内容提供者是封装在自定义API中的一组数据,可以读取数据和向API中写入数据。***这是在应用程序之间共享全局数据的最佳方式。
	使用资源 （）   ：资源是程序需要的本地化后文本字符串、位图或其他少量的非代码信息。程序生成时，所需的所有资源都会被编译到应用程序中。
										资源存储在项目中的res目录中。Android 资源编译器会根据资源所处的子文件夹及文件的格式来处理这些资源。
										资源编译器会将资源压缩并打包，然后生成一个名为R的类，其中包含的表示符可用于在程序中引用这些资源。
	安全性					：每个应用程序都在其自己的Linux进程中运行，硬件禁止一个进程访问其他进程的内存。某个应用程序所创建的任何文件都不能被其它应用程序读写。
										某些关键操作的访问也是有限制的，必须在一个名为AndroidManifest.xml的文件中明确请求获得所需的权限。
										INTERNET:访问因特网
										READ_CONTACTS:读取（不能写入）用户的联系人数据。
										WRITE_CONTACTS:写入（但不能读取）用户的联系人数据
										RECEIVES_SMS:监视收到的SMS（文本）信息。
										ACCESS_COARSE_LOCATIONL:使用不太精确的位置提供者，如手机或wifi
										ACCESS_FINE_LOCATION:使用更为精确的位置提供者，如GPS

