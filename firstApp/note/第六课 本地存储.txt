一、
  1、Android 支持开发人间将所有的状态永久的存储在移动设备上，并同时保护其不被其
他程序意外或恶意访问
  本地数据存储方法：首选项API、实例状态绑定和闪存文件
二、首选项存储
  PreferenceActivity是android提供的对系统信息和配置进行自动保存的Activity，它
通过SharedPrefence方式将信息保存在XML文件当中。使用PreferencActivity不需要我们
对SharedPreference进行操作，系统会自动对Activity的各种View上的改变进行保存。
  通过
PreferenceManager.getDefaultSharedPreferences(Context).getBoolean(key,defaultValue)
方法可以将存储在Xml文件中的值取出，但是Xml文件中的key值必须与此处的key值相同。
三、Settings 菜单的创建
    在Activity中重写onCreateOptionsMenu(Menu)方法，然后利用getMenuInflater()方法
  获取到MenuInflater对象，接着利用inflater对象根据配置文件来生成菜单文件。
    在onCreateOptionsMenu(Menu)中布局的选项，被点击时会在
onOptionsItemSelected(MeunItem item)方法中被激活，该方法需要在Activity中重
写。

四、利用首选项API存储信息
  1、getRreference(MODE).edit().putString(key,value).commit()的方法将相关数据存储
  下来。
  2、取值时直接利用getPreference(MODE).getString(key,defaultValue);即可
 
五、onSaveInstanceState()和onRestoreInstanceState(Parcelable state) 
  Activity.onSaveInstanceState()在处理时，Android会遍历视图层次结构中的每个视
  图，每当发现一个具有ID的视图，就调用View.onSaveInstanceState()方法（
  与onRestoreInstanceState()方法的调用规则相同）自己创建的视图类可以自己指定ID
  的值。
    在代码中将数据存储在了Bundle对象中，该Bundle对象实现了Pacelable接口，并将
该Bundle对象返回。
六、数据传递
  Android中Activity之间传递数据是通过Intent实现的。
  Android中序列化对象主要有两种办法：
    1、实现Serializable接口
    2、实现Pacelable接口
  Serializable接口是Java SE本身支持的。Pacelable接口是Android特有的功能，效率
  比Serializable接口高，还可在进程之间通信。
  Bundle 类是一个Key/Value对
七、文件系统的访问
    利用java.io包中到的实例进程即可访问文件系统。程序能够访问的主要是在安装时创
  建的包私有目录（/data/data/包名）
    context 提供了一些辅助方法（Activity类继承自Context类）开发人员可以借助该
  方法从文件系统读取数据或向文件系统写入数据。
      常用方法：
        deleteFile():删除一个私有文件
        fileList():以String 数组的形式返回该应用程序私有目录中所有文件的列表
        openFileInput():打开一个用于读取的私有文件
        openFileOutput():打开一个用于写入的私有文件
八、访问SD卡
  SD卡不能用于存放代码，每个应用程序都可以从SD卡上读取文件，也可以向SD卡中写入
文件
  可以利用Context.getExternalFileDir()方法进入外部系统的目录。
九、Assets
  放入assets目录中的任何内容都被完整的复制到本地存储设备。
